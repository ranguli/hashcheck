from unittest.mock import patch

import pytest


class TestMalwareBazaar:
    def test_exists(self, malwarebazaar_report_1):
        assert malwarebazaar_report_1

    def test_investigation_url(self, malwarebazaar_report_1):
        assert (
            malwarebazaar_report_1.reports.malwarebazaar.investigation_url
            == "https://bazaar.abuse.ch/sample/73bef2ac39be261ae9a06076302c1d0af982e0560e88ac168980fab6ea5dd9c4/"
        )

    def test_tags(self, malwarebazaar_report_1):
        assert malwarebazaar_report_1.reports.malwarebazaar.tags == {
            "Loki",
            "exe",
            "family:lokibot",
            "lokibot",
            "spyware",
            "stealer",
            "trojan",
        }

    def test_signature(self, malwarebazaar_report_1):
        assert malwarebazaar_report_1.reports.malwarebazaar.signature == "Loki"

    def test_file_size(self, malwarebazaar_report_1):
        assert malwarebazaar_report_1.reports.malwarebazaar.file_size == 157777

    def test_file_type(self, malwarebazaar_report_1):
        assert malwarebazaar_report_1.reports.malwarebazaar.file_type == "exe"

    def test_comment(self, malwarebazaar_report_1):
        assert (
            malwarebazaar_report_1.reports.malwarebazaar.comment
            == "Loki C2:\nhttp://becharnise.ir/fb3/fre.php"
        )

    def test_origin_country(self, malwarebazaar_report_1):
        assert malwarebazaar_report_1.reports.malwarebazaar.origin_country == "FR"

    def test_cape(self, malwarebazaar_report_1):
        assert (
            malwarebazaar_report_1.reports.malwarebazaar.cape
            == "https://www.capesandbox.com/analysis/124109/"
        )

    def test_urlhaus(self, malwarebazaar_report_1):
        assert (
            malwarebazaar_report_1.reports.malwarebazaar.urlhaus
            == "https://urlhaus.abuse.ch/url/1064768/"
        )

    def test_ole(self, malwarebazaar_report_1):
        assert malwarebazaar_report_1.reports.malwarebazaar.ole == []

    def test_behavior(self, malwarebazaar_report_1):
        assert malwarebazaar_report_1.reports.malwarebazaar.behavior == [
            {
                "behavior": "Stealing user critical data",
                "service": "vxCube",
                "threat": 2,
            },
            {
                "behavior": "Connection attempt to an infection source",
                "service": "vxCube",
                "threat": 2,
            },
            {
                "behavior": "Moving of the original file",
                "service": "vxCube",
                "threat": 2,
            },
            {
                "behavior": "Creating a file in the %temp% directory",
                "service": "vxCube",
                "threat": 1,
            },
            {"behavior": "Creating a window", "service": "vxCube", "threat": 1},
            {"behavior": "Creating a file", "service": "vxCube", "threat": 1},
            {
                "behavior": "Unauthorized injection to a recently created process",
                "service": "vxCube",
                "threat": 1,
            },
            {
                "behavior": "Reading critical registry keys",
                "service": "vxCube",
                "threat": 1,
            },
            {"behavior": "Changing a file", "service": "vxCube", "threat": 1},
            {"behavior": "Replacing files", "service": "vxCube", "threat": 1},
            {"behavior": "DNS request", "service": "vxCube", "threat": 1},
            {
                "behavior": "Creating a file in the %AppData% subdirectories",
                "service": "vxCube",
                "threat": 1,
            },
            {
                "behavior": "Deleting a recently created file",
                "service": "vxCube",
                "threat": 1,
            },
            {"behavior": "Sending a UDP request", "service": "vxCube", "threat": 1},
            {
                "behavior": "Sending an HTTP POST request to an infection source",
                "service": "vxCube",
                "threat": 3,
            },
            {"behavior": "Lokibot", "service": "Triage", "threat": 3},
            {"behavior": "Loads dropped DLL", "service": "Triage", "threat": 3},
            {
                "behavior": "Suspicious use of SetThreadContext",
                "service": "Triage",
                "threat": 2,
            },
            {
                "behavior": "Enumerates physical storage devices",
                "service": "Triage",
                "threat": 1,
            },
            {
                "behavior": "Suspicious behavior: EnumeratesProcesses",
                "service": "Triage",
                "threat": 1,
            },
            {
                "behavior": "Suspicious behavior: MapViewOfSection",
                "service": "Triage",
                "threat": 1,
            },
            {
                "behavior": "Suspicious behavior: RenamesItself",
                "service": "Triage",
                "threat": 1,
            },
            {
                "behavior": "Suspicious use of AdjustPrivilegeToken",
                "service": "Triage",
                "threat": 1,
            },
            {
                "behavior": "Suspicious use of WriteProcessMemory",
                "service": "Triage",
                "threat": 1,
            },
        ]

    def test_url(self, malwarebazaar_report_1):
        assert malwarebazaar_report_1.reports.malwarebazaar.urls == [
            {
                "service": "MalwareBazaar",
                "url": "https://bazaar.abuse.ch/sample/73bef2ac39be261ae9a06076302c1d0af982e0560e88ac168980fab6ea5dd9c4/",
            },
            {
                "service": "ANY.RUN",
                "url": "https://app.any.run/tasks/9d90bbb6-48dc-4dda-9fc4-ef3f0856d7c5",
            },
            {
                "service": "CERT-PL_MWDB",
                "url": "https://mwdb.cert.pl/sample/73bef2ac39be261ae9a06076302c1d0af982e0560e88ac168980fab6ea5dd9c4/",
            },
            {"service": "CAPE", "url": "https://www.capesandbox.com/analysis/124109/"},
            {"service": "Triage", "url": "https://tria.ge/reports/210313-4sqay81mdj/"},
            {"service": "Spamhaus_HBL", "url": "https://www.spamhaus.org/hbl/"},
            {
                "service": "UnpacMe",
                "url": "https://www.unpac.me/results/c6cad7cc-f354-4c93-b8e7-3e13e435bb32/",
            },
        ]

    def test_mime_type(self, malwarebazaar_report_1):
        assert (
            malwarebazaar_report_1.reports.malwarebazaar.mime_type
            == "application/x-dosexec"
        )
