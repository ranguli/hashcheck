import json

from ratelimit import limits, RateLimitException
from backoff import on_exception, expo
import requests

from hashcheck.services.service import Service


class MalwareBazaar(Service):
    name = "malwarebazaar"

    def __init__(self, file_hash: str, api_key: str):
        self.url = "https://mb-api.abuse.ch/api/v1/"
        self.response = self._get_api_response(file_hash, api_key)

        self.investigation_url = self._get_investigation_url()
        self.is_malicious = None  # self._get_is_malicious(self.response)
        self.signature = self._get_signature(self.response)

    @on_exception(expo, RateLimitException, max_tries=10)
    @limits(calls=15, period=60)
    def _get_api_response(self, file_hash: str, api_key: str) -> dict:
        data = {"query": "get_info", "hash": file_hash}

        r = requests.post(self.url, data=data, headers={"API_KEY": api_key})

        return json.loads(r.text)

    def _get_investigation_url(self) -> str:
        # MalwareBazaar indexes URLs by their SHA256 hash
        sha256_hash = self._get_other_hashes(self.response)

        if sha256_hash.get("SHA256"):
            return f"https://bazaar.abuse.ch/sample/{sha256_hash}/"
        else:
            return None

    def _get_other_hashes(self, response):
        hash_keys = ["sha256_hash", "sha1_hash", "md5_hash"]

        return dict((key, value) for key, value in response.items() if key in hash_keys)

    def _get_signature(self, response):
        return response.get("signature")
