#!/usr/bin/env python
""" Represents response from the VirusTotal API """

from typing import List, Optional, Set

import vt
from backoff import expo, on_exception
from ratelimit import RateLimitException, limits

from ioccheck import exceptions
from ioccheck.services.service import Service


class VirusTotal(Service):
    """ Represents response from the VirusTotal API """

    name = "virustotal"
    url = "https://virustotal.com"
    required_credentials = ["api_key"]

    def __init__(self, ioc, credentials):
        Service.__init__(self, ioc, credentials)

    @on_exception(expo, RateLimitException, max_tries=10, max_time=60)
    @limits(calls=4, period=60)
    def _get_api_response(self, ioc: str) -> Optional[dict]:
        if not self.credentials.api_key:
            raise exceptions.InvalidCredentialsError(
                "VirusTotal API key is missing from the credentials file."
            )

        try:
            client = vt.Client(self.credentials.api_key)
            result = client.get_object(f"/files/{ioc}")
            return result.to_dict().get("attributes")
        except vt.error.APIError as error:
            if "WrongCredentialsError" in str(error):
                raise exceptions.InvalidCredentialsError(
                    "VirusTotal says your API keys are invalid."
                ) from error
        except AttributeError as error:
            raise exceptions.APIError from error

        return None

    @property
    def investigation_url(self) -> Optional[str]:
        """ The URL a human can use to follow up for more information """
        return f"{self.url}/gui/file/{self.ioc}/"

    @property
    def detections(self) -> Optional[dict]:
        """The anti-virus providers that detected the hash"""
        try:
            return self.response.get("last_analysis_results")
        except AttributeError:
            return None

    @property
    def detection_coverage(self) -> Optional[float]:
        """The number of A.V providers detecting the sample divided by total providers."""
        if (
            not isinstance(self.detections, dict)
            or self.detections is None
            or not isinstance(self.detection_count, int)
        ):
            return None

        if len(self.detections.keys()) == 0:
            return 0

        return self.detection_count / len(self.detections.keys())

    @property
    def detection_count(self) -> Optional[int]:
        """The number of anti-virus providers available from VirusTotal"""
        if not isinstance(self.detections, dict) or self.detections is None:
            return None

        return len(
            [k for k, v in self.detections.items() if v.get("category") == "malicious"]
        )

    @property
    def reputation(self) -> Optional[int]:
        """VirusTotal community score for a given entry"""
        try:
            return self.response.get("reputation")
        except AttributeError:
            return None

    @property
    def relationships(self) -> Optional[dict]:
        """Describes how the hash interacts with IPs, domains, etc"""
        try:
            return self.response.get("relationships")
        except AttributeError:
            return None

    @property
    def tags(self) -> Set[str]:
        """User-provided tags to classify samples"""
        tags: Set[str] = set()

        try:
            names = self.response.get("popular_threat_classification").get(  # type: ignore
                "popular_threat_name"
            )
        except AttributeError:
            return tags

        if names:
            tags.update([name.get("value") for name in names])

        other_tags = self.response.get("tags")
        if other_tags:
            tags.update(other_tags)

        return tags

    @property
    def hashes(self) -> dict:
        """Other hashes stored by VirusTotal for this file generated by other algorithms"""

        hash_names = {
            "sha256": "SHA256",
            "sha1": "SHA1",
            "tlsh": "TLSH",
            "vhash": "vhash",
            "authentihash": "authentihash",
            "ssdeep": "ssdeep",
            "md5": "MD5",
        }

        hashes = {}

        for key, value in self.response.items():
            if key in hash_names.keys() and value is not None:
                hashes.update({hash_names.get(key): value})

        return hashes

    @property
    def urls(self) -> Optional[List[dict]]:
        """Returns all URLs given by the VirusTotal service"""
        return [{"service": "VirusTotal", "url": self.investigation_url}]
