#!/usr/bin/env python
"""Module for the MalwareBazaar service"""

from typing import List, Optional, Set

import requests
from backoff import expo, on_exception
from ratelimit import RateLimitException, limits

from ioccheck.exceptions import InvalidCredentialsError, IOCNotFoundError
from ioccheck.services.service import Service


class MalwareBazaar(Service):
    """ Represents the data from a MalwareBazaar API response"""

    name = "malwarebazaar"
    url = "https://mb-api.abuse.ch/api/v1/"
    ioc: str
    required_credentials = ["api_key"]

    def __init__(self, ioc: str, credentials: dict):
        Service.__init__(self, ioc, credentials)

        if self.response.get("query_status") == "hash_not_found":
            raise IOCNotFoundError

        self._response_data = self.response.get("data")[0]  # type: ignore

        self.is_malicious = None  # self._get_is_malicious(self.response)

    @on_exception(expo, RateLimitException, max_tries=10)
    @limits(calls=15, period=60)
    def _get_api_response(self, ioc: str) -> dict:
        if not self.credentials.api_key:
            raise InvalidCredentialsError

        return requests.post(
            self.url,
            data={"query": "get_info", "hash": ioc},
            headers={"API_KEY": self.credentials.api_key},
        ).json()

    @property
    def investigation_url(self) -> Optional[str]:
        """ The URL a human can use to follow up for more information """
        sha256_hash = self.hashes.get("SHA256")

        # MalwareBazaar indexes URLs by their SHA256 hash
        if sha256_hash is not None:
            return f"https://bazaar.abuse.ch/sample/{sha256_hash}/"

        return None

    @property
    def hashes(self) -> dict:
        """Other hashes for this file generated by other algorithms"""
        hash_names = {
            "sha256_hash": "SHA256",
            "sha1_hash": "SHA1",
            "md5_hash": "MD5",
            "sha3_384_hash": "SHA3-384",
            "imphash": "imphash",
            "tlsh": "TLSH",
            "telfhash": "telfhash",
        }

        hashes = {}

        for key, value in self._response_data.items():
            if key in hash_names.keys() and value is not None:
                hashes.update({hash_names.get(key): value})

        return hashes

    @property
    def signature(self) -> Optional[str]:
        """The signature of the sample returned by MalwareBazaar"""
        return self._response_data.get("signature")

    @property
    def vendor_intel(self) -> Optional[dict]:
        """Threat intelligence data from other providers"""
        try:
            return self._response_data.get("vendor_intel")
        except AttributeError:
            return None

    @property
    def tags(self) -> Set[str]:
        """User-submitted tags for the sample from the MalwareBazaar website"""
        tags: Set[str]

        if self._response_data is None:
            return tags

        try:
            tags.update(self._response_data.get("tags"))
        except TypeError:
            pass

        if not self.vendor_intel:
            return tags

        any_run = self.vendor_intel.get("ANY.RUN")

        if any_run:
            try:
                for result in any_run:
                    any_run_tags = result.get("tags")
                    tags.update(any_run_tags)
            except AttributeError:
                pass

        triage = self.vendor_intel.get("Triage")

        if triage:
            try:
                tags.update(triage.get("tags"))
            except AttributeError:
                pass

        return tags

    @property
    def file_size(self) -> Optional[int]:
        """Returns the file size of the sample"""
        return self._response_data.get("file_size")

    @property
    def file_type(self) -> Optional[str]:
        """Returns the file extension of the sample"""
        return self._response_data.get("file_type")

    @property
    def mime_type(self) -> Optional[str]:
        """Returns the MIME type of the sample"""
        return self._response_data.get("file_type_mime")

    @property
    def origin_country(self) -> Optional[str]:
        """Returns the origin country of the submission"""
        try:
            return self._response_data.get("origin_country")
        except AttributeError:
            return None

    @property
    def comment(self) -> Optional[str]:
        """Returns the comment on the submission"""
        try:
            return self._response_data.get("comment")
        except AttributeError:
            return None

    @property
    def urlhaus(self) -> Optional[str]:
        """Returns the URL for the relevant URLhaus entry"""
        try:
            for result in self._response_data.get("file_information"):
                if result.get("context") == "URLhaus":
                    return result.get("value")
        except (AttributeError, TypeError):
            pass

        return None

    @property
    def cape(self) -> Optional[str]:
        """Returns the URL for the relevant CAPE sandbox analysis"""
        try:
            for result in self._response_data.get("file_information"):
                if result.get("context") == "cape":
                    return result.get("value")
        except (AttributeError, TypeError):
            pass

        return None

    @property
    def ole(self) -> Optional[str]:
        """Returns OLE information for the sample"""
        try:
            return self._response_data.get("ole_information")
        except AttributeError:
            return None

    @property
    def behaviour(self) -> List:
        behaviours: List = []

        if not self.vendor_intel:
            return behaviours

        vxcube = self.vendor_intel.get("vxCube").get("behaviour")  # type: ignore

        for behaviour in vxcube:
            if behaviour.get("threat_level") == "neutral":
                threat = 1
            elif behaviour.get("threat_level") == "suspicious":
                threat = 2
            elif behaviour.get("threat_level") == "malicious":
                threat = 3

            result = {
                "service": "vxCube",
                "behaviour": behaviour.get("rule"),
                "threat": threat,
            }
            behaviours.append(result)

        triage = self.vendor_intel.get("Triage").get("signatures")  # type: ignore

        for behaviour in triage:
            score = behaviour.get("score")

            if score is None:
                score = 0

            score = int(score)

            if score < 5:
                threat = 1
            elif score == 5:
                threat = 2
            elif score > 5:
                threat = 3

            result = {
                "service": "Triage",
                "behaviour": behaviour.get("signature"),
                "threat": threat,
            }
            behaviours.append(result)

        return behaviours

    @property
    def urls(self) -> Optional[List[dict]]:
        urls = [{"service": "MalwareBazaar", "url": self.investigation_url}]

        vendor_intel = self._response_data.get("vendor_intel")

        if vendor_intel:
            for key, value in vendor_intel.items():

                if isinstance(value, list):
                    value = value[0]

                if value.get("link"):
                    link = value.get("link")
                elif value.get("analysis_url"):
                    link = value.get("analysis_url")
                else:
                    continue

                if link:
                    urls.append({"service": key, "url": link})
        return urls
